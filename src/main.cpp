/*  LOOT

    A load order optimisation tool for Oblivion, Skyrim, Fallout 3 and
    Fallout: New Vegas.

    Copyright (C) 2012-2016    WrinklyNinja

    This file is part of LOOT.

    LOOT is free software: you can redistribute
    it and/or modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation, either version 3 of
    the License, or (at your option) any later version.

    LOOT is distributed in the hope that it will
    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with LOOT.  If not, see
    <https://www.gnu.org/licenses/>.
*/

#include <loot/api.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);

PYBIND11_PLUGIN(loot_api) {
  using loot::CreateDatabase;
  using loot::DatabaseInterface;
  using loot::IsCompatible;
  using loot::GameType;
  using loot::LootVersion;
  using loot::MessageType;
  using loot::PluginMessage;
  using loot::PluginTags;

  using pybind11::enum_;
  using pybind11::class_;

  pybind11::module module("loot_api", "A Python module that wraps the LOOT API, generated by pybind11.");

  enum_<GameType>(module, "GameType", "Wraps :cpp:type:`GameType <loot::GameType>`.")
    .value("tes4", GameType::tes4);

  enum_<MessageType>(module, "MessageType", "Wraps :cpp:type:`MessageType <loot::MessageType>`.")
    .value("say", MessageType::say)
    .value("warn", MessageType::warn)
    .value("error", MessageType::error);

  class_<PluginMessage>(module, "Message", "Wraps :cpp:class:`PluginMessage <loot::PluginMessage>`.")
    .def_readwrite("type", &PluginMessage::type)
    .def_readwrite("text", &PluginMessage::text);

  class_<PluginTags>(module, "PluginTags", "Wraps :cpp:class:`PluginTags <loot::PluginTags>`.")
    .def_readwrite("added", &PluginTags::added)
    .def_readwrite("removed", &PluginTags::removed)
    .def_readwrite("userlist_modified", &PluginTags::userlist_modified);

  class_<LootVersion>(module, "Version", "Wraps :cpp:class:`LootVersion <loot::LootVersion>`.")
    .def_readonly_static("major", &LootVersion::major)
    .def_readonly_static("minor", &LootVersion::minor)
    .def_readonly_static("patch", &LootVersion::patch)
    .def_readonly_static("revision", &LootVersion::revision);

  class_<DatabaseInterface, std::shared_ptr<DatabaseInterface>>(module, "DatabaseInterface", "Wraps :cpp:class:`DatabaseInterface <loot::DatabaseInterface>`.")
    .def("load_lists", &DatabaseInterface::LoadLists, "Loads the masterlist and userlist from the paths specified. Wraps :cpp:func:`LoadLists`.")
    .def("get_plugin_tags", &DatabaseInterface::GetPluginTags, "Outputs the Bash Tags suggested for addition and removal by the database for the given plugin. Wraps :cpp:func:`GetPluginTags`.")
    .def("get_plugin_messages", &DatabaseInterface::GetPluginMessages, "Outputs the messages associated with the given plugin in the database. Wraps :cpp:func:`GetPluginMessages`.");

  module.def("is_compatible", &IsCompatible, "Checks for API compatibility. Wraps :cpp:func:`IsCompatible <loot::IsCompatible>`.");

  module.def("create_database", &CreateDatabase, "Initialise a new database handle. Wraps :cpp:func:`CreateDatabase <loot::CreateDatabase>`.");

  return module.ptr();
}
